apply plugin: 'com.android.application'

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.0'
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "de.wohlfrom.presenter"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 3
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            testCoverageEnabled = true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.all {
        testLogging {
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    // Increase timeout for adb operations in slow environments like travis ci
    adbOptions {
        timeOutInMs 10 * 60 * 1000  // 10 minutes
    }
}

dependencies {
    implementation 'com.android.support:support-v13:27.1.1'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    // Espresso dependencies
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.7.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group "verification"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug",
            excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/*.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
